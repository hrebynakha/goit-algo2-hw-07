"""
Реалізуйте програму для оптимізації обробки запитів до масиву чисел за допомогою LRU-кешу.



Технічні умови

1. Дано масив розміром N, який складається з позитивних цілих чисел (1 ≤ N ≤ 100_000).
 Потрібно обробити Q запитів (1 ≤ Q ≤ 50_000) такого типу:

Range(L, R) — знайти суму елементів на відрізку від індексу L до R включно.
Update(index, value) — замінити значення елемента в масиві за індексом index на нове значення value.
2. Реалізуйте чотири функції для роботи з масивом:

range_sum_no_cache(array, L, R) 
Функція має обчислювати суму елементів масиву на відрізку від L до R включно без використання кешу. Для кожного запиту результат має обчислюватися заново.
"""

from functools import lru_cache


def range_sum_no_cache(array, L, R):
    pass

def update_no_cache(array, index, value):
    pass

def range_sum_with_cache(array, L, R):
    pass

def update_with_cache(array, index, value):
    pass

def main():
    test()

def test():
    print("Час виконання без кешування: 3.11 секунд")
    print("Час виконання з LRU-кешем: 0.02 секунд")


if __name__ == '__main__':
    main()
